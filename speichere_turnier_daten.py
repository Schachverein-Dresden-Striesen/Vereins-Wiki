# Generated by Selenium IDE
# https://applitools.com/tutorials/selenium-ide.html#selenium-ide-videos
# https://github.com/mozilla/geckodriver/releases/download/v0.31.0/geckodriver-v0.31.0-win64.zip

import logging
import os
import re
from pathlib import Path

from selenium import webdriver
from selenium.webdriver.common.by import By

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s %(levelname)s:%(name)s:%(message)s"
)
LOGGER = logging.getLogger()
LOGGER.addHandler(logging.FileHandler(f"{__file__}.log"))
logging.getLogger("selenium").setLevel(logging.INFO)
logging.getLogger("urllib3.connectionpool").setLevel(logging.INFO)


class SpeichereDWZDaten:
    basename = "F2810_DWZ".lower()

    URL_LOGIN = "https://www.schachbund.de/anmelden.html"
    URL_STRIESEN = "https://www.schachbund.de/verein/F2810.html"

    XPATH_DEWIS_TABLE = "//table[@id='dewisTable']"
    PAT_ROWS = "/tbody/tr"
    SPIELER_LINK = "[{}]/td[4]/a"
    TURNIER_LINK = "[{}]/td[3]/a"
    XPATH_GEGNER = "//div[4]/table/tbody/tr[{}]/td[2]"
    allowed_chars = re.compile(r'[<>:"/\\|?*]')

    def setup_method(self):
        options = webdriver.FirefoxOptions()
        options.headless = True  # Headless-Modus aktivieren
        self.driver = webdriver.Firefox(options=options)
        self.vars = {}

    def teardown_method(self):
        self.driver.quit()

    def writeFile(self, data, format: str) -> str:
        from datetime import datetime

        now = datetime.now()
        timestamp = now.strftime("%Y%m%d_%H%M%S")
        filename = f"{self.basename}_{timestamp}.{format}"
        with open(filename, "w") as json_file:
            json_file.write(data)
        LOGGER.info("Written to " + filename)
        return filename

    def handle_tabellen(self, tabellen, name, turnier):
        safe_folder_name = self.allowed_chars.sub("_", name)
        os.makedirs(safe_folder_name, exist_ok=True)
        safe_turnier_name = self.allowed_chars.sub("_", turnier)
        for tabelle in tabellen:
            try:
                file_name = (
                    Path() / safe_folder_name / f"{safe_turnier_name}_{tabelle.id}.html"
                )
                with open(file_name, mode="x", encoding="utf-8") as fw:
                    LOGGER.info("Writing '%s'", file_name)
                    fw.write(tabelle.get_attribute("innerHTML"))
            except FileExistsError as e:
                LOGGER.error(e)

    def login(self):
        self.driver.get(self.URL_LOGIN)
        self.driver.find_element(By.ID, "username").send_keys(os.getenv("DWZ_USERNAME"))
        self.driver.find_element(By.ID, "password").send_keys(os.getenv("DWZ_PASSWORD"))
        self.driver.find_element(By.CSS_SELECTOR, ".submit").click()

    def startIteration(self):
        self.login()
        self.driver.get(self.URL_STRIESEN)

        spieler = self.driver.find_elements(
            By.XPATH, self.XPATH_DEWIS_TABLE + self.PAT_ROWS
        )

        for spielernr in range(13, len(spieler)):
            name = self.driver.find_element(
                By.XPATH,
                self.XPATH_DEWIS_TABLE
                + self.PAT_ROWS
                + self.SPIELER_LINK.format(spielernr),
            )
            name_text = name.text
            LOGGER.info("Name: %s", name_text)
            name.click()  # Turniere
            for turniernr in range(1, len(self.driver.find_elements(By.XPATH, self.XPATH_DEWIS_TABLE + self.PAT_ROWS))):  # fmt: skip
                turnier = self.driver.find_element(
                    By.XPATH,
                    self.XPATH_DEWIS_TABLE
                    + self.PAT_ROWS
                    + self.TURNIER_LINK.format(turniernr),
                )
                turnier_text = turnier.text
                LOGGER.info("Turnier: %s", turnier_text)
                turnier.click()  # Gegner
                LOGGER.info("Gegner")
                tabellen = self.driver.find_elements(By.CLASS_NAME, "table_responsiv")
                self.handle_tabellen(tabellen, name_text, turnier_text)
                self.driver.back()

            self.driver.back()


# Dir with geckodriver
os.chdir(Path.home() / os.getenv("DWZ_PATH"))
LOGGER.info(f"Working in '{os.getcwd()}'")

suite = SpeichereDWZDaten()
suite.setup_method()
file_name = suite.startIteration()
suite.teardown_method()
